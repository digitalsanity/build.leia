#!/bin/zsh

SCRIPT_VERSION="1.1.0"
TIMEBLOCK="${WHITE}[$(date +%T)]${END}"

if [[ $( grep REMOVEME ${0:a:h}/etc/${0:t}.conf ) ]]; then
    echo "Please edit the configuration file located at"
    echo "${0:a:h}/etc/${0:t}.conf"
    echo "Script aborted."
    exit
fi
    
# This function is used to include common sets of files used
# Edit the path to reflect your installation
function include () {
  INC_FILE=${HOME}/bin/include/${1}.inc
	# echo ${INC_FILE}
	# exit
	if [[ ! -f ${INC_FILE} ]]; then
		INC_OPT=$( echo ${1} | cut -d\/ -f2 )
		echo "Supplied option \"${INC_OPT}\" is not valid."
		echo "Not critical. Will continue."
	else
		. ${INC_FILE}
	fi
}

include common/colors
include common/numcpu
include common/with_to_array

# We load the configuration file
. ${0:a:h}/etc/${0:t}.conf

# Function: LOGGER
# Usage: loggy <message>
include common/loggy

# We try to find the system language and include it in the script.
# If we don't have the translation for the supplied language, the
# script will ask if the user wants to use en_US for now.
# It is also suggested that the user may want to help out by
# translating this script to their language.
SysLang=$( echo ${LANG} | cut -d= -f2 | cut -d. -f1 | sort -u )

if [[ -f ${INCLUDEDIR}/${0:t}/language/${MyLANG}.inc ]]; then
    include ${0:t}/language/${MyLANG} ${0:t}
    NOLANG=${SysLang}
elif [[ -f ${INCLUDEDIR}/${0:t}/language/${SysLang}.inc ]]; then
    include ${0:t}/language/${SysLang} ${0:t}
    NOLANG=${MyLANG}
else
    echo "\n${RED}Could not find a language file for your system language (${NOLANG}).${END}"
    echo "${WHITE}Would you like to continue with English (en_US)? (Y/n)${END} \c"
    read LangAnswer
    if [[ ( ${LangAnswer} == "" || ${LangAnswer} == "Y" || ${LangAnswer} == "y" ) ]]; then
        include ${0:t}/language/en_US ${0:t}
    else
        echo "\n${YELLOW}You decided not to continue. Sorry about that!${END}"
        echo "${WHITE}Please consider translating this script to your language.${END}"
        echo "${WHITE}The language files can be found at"
        echo "${INCLUDEDIR}/${0:t}/language/${END}.\n"
        exit
    fi
fi

function ShowHelp () {
	# Usage: ShowHelp ${0:t}
    for i in {10..22}
    do
        help=Help_${i}
        eval echo \$${help}
    done
	exit
}

# The default behavior is to do a clean,addons install
# Same as build.leia --with=clean,addons
if [[ ${@} == "" ]]; then
	include ${0:t}/install
	include ${0:t}/clean
	include ${0:t}/addons
elif [[ ${@} =~ "--with" ]]; then
# We default to doing a clean install if not --with=clean is set and if --with=dirty is not set
	if [[ ! ${CLEAN_IS_SET} && ! ${DIRTY_IS_SET} ]]; then
		include ${0:t}/clean
		MSG="No clean option set. This is the default."
		echo "${TIMEBLOCK} ${INFO}${MSG}${END}"
		loggy ${MSG}
	fi

	# Initialze the array in the function WithToArray before use
	# Options are: --with=clean,dirty,addons,no-git,force
	WithToArray ${@}
	for i in ${WithArray}
	do
	    include ${0:t}/${i}
	done
fi

# If the input is other that --help or --with, display the --help message and exit
# This should prevent anyone from doing something they didn't want to.
if [[ ${1} == "--help" ]]; then
	ShowHelp ${0:t}
	exit
fi

# We set it to install automatically, no matter if --with=install is set or not
# This is what we want...
# This is only a temporary workaround until I find a smarter way of doing it...
if [[ ! ${LOCAL_IS_SET} ]]; then
	include ${0:t}/install
fi

VKODI=Leia

# Edit this to install to another directory
PREFIX="/opt/${VKODI}"
#

KODI=${KODIDIR}/${VKODI}
YEAR=$(date +%Y)
ARROW="${W}-${END}${INFO}>${END}"

# This text needs to be added to the language files. Hardcoded for now...
if [[ ${CLEAN_IS_SET} && ${DIRTY_IS_SET} ]]; then
	echo "${W}**${END} ${RED}You can't do a clean and dirty compilation at the same time.${END} ${W}**${END}"
	echo "${W}**${END} ${RED}Please see \"${0:t} --help\" for more information.${END} \t${W}**${END}"
	echo "${W}**${END} ${RED}Aborting!${END} \t\t\t\t\t\t\t${W}**${END}"
	exit
fi

# Function: FETCH_KODI
function fetch_kodi () {
	if [[ ! -d ${KODI} ]]; then
		echo "Kodi source not found. Would you like me to fetch it? (Y/n) \c"
		read answer
		
		if [[ ${answer} == "" || ${answer} == "Y" || ${answer} == "y" ]]; then
			buildin cd ${KODIDIR} > /dev/null 2>&1
			git clone https://github.com/xbmc/xbmc ${VKODI} >> ${LOGGYLOGFILE} 2>&1
			echo "Do you wish to compile and install the binary-addons? (Y/n) \c"
			read binary-addons
			
			if [[ ${binary-addons} == "" || ${binary-addons} == "Y" || ${binary-addons} == "y" ]]; then
				BINARY_ADDONS_INSTALL=1
			else
				echo "OK. I will not install the addons for you."
			fi
		else
			echo "\n ${ARROW} Please clone the Kodi source into ${KODI}"
			echo "${ARROW} git clone https://github.com/xbmc/xbmc ${VKODI}"
			echo "${ARROW} Aborting!"
			exit
		fi
	fi
# We need to set a variable here so that we know it's a fresh copy
FRESH_INSTALL=1
}

# Function: GIT_PULL
function git_pull () {

  if [[ ${FORCE_IS_SET} ]]; then
      local YesForce
      YesForce=" (${L_24})"
  fi
	
	MSG="${L_20} ${VKODI}${YesForce}"
	echo "${TIMEBLOCK} ${INFO}${MSG}${END}"
	loggy ${MSG}
    
  if [[ ! ${NOGIT_IS_SET} ]]; then

	MSG="${L_21} ${VKODI} ${L_22}"
	echo "${TIMEBLOCK} ${INFO}${MSG}${END}"
	loggy ${MSG}

	builtin cd ${KODI}
  	git pull > /tmp/build.leia.gitpull 2>&1
    
    if [[ $( grep "Already up-to-date" /tmp/build.leia.gitpull ) ]]; then
			if [[ ${FORCE_IS_SET} ]]; then
				FORCED="${L_24}"
			else
				FORCED="${L_25}"
			fi
		
    MSG="${VKODI} ${L_23} ${FORCED}"
		echo "${TIMEBLOCK} ${ARROW} ${WARNING}${MSG}${END}"
		loggy ${MSG}
		GITMSG="${VKODI} is already up to date. New build forced."
        
		if [[ ! ${FORCE_IS_SET} ]]; then
      GITMSG="${VKODI} is already up to date. No new build at the moment."
			exit
		fi
	fi
  fi

# Removing the temp git pull file
loggy "##############################################################"
cat /tmp/build.leia.gitpull >> ${LOGGYLOGFILE} > /dev/null 2>&1
rm -f /tmp/build.leia.gitpull > /dev/null 2>&1

}

# Function: CLEAN_KODI
function clean_kodi () {

# We check if we have a message from git_pull. If not, we continue the build
if [[ ! ${GITMSG} ]] || [[ ! ${FAILED} ]]; then

    MSG="${L_30} ${KODINAMEVERSION}"
    loggy ${MSG}
    
		if [[ ${CLEAN_IS_SET} ]]; then
			MSG="Cleaning up old kodi-build"
			echo "${TIMEBLOCK} ${INFO}${MSG}${END}"
			loggy ${MSG}
			builtin cd ${KODI}
			rm -rf kodi-build > /dev/null 2>&1
			mkdir kodi-build > /dev/null 2>&1
		elif [[ ${DIRTY_IS_SET} ]]; then
			builtin cd ${KODI}/kodi-build
		fi
# End of the GITMSG check
fi

}

# Function: CONFIGURE_KODI
function configure_kodi () {
		if [[ ${CLEAN_IS_SET} ]]; then
			MSG="${L_31} ${VKODI}"
			echo "${TIMEBLOCK} ${INFO}${MSG}${END}${FFMPEG}"
			loggy ${MSG}
			builtin cd ${KODI}/kodi-build
			cmake .. -DCMAKE_INSTALL_PREFIX=${PREFIX} >> ${LOGGYLOGFILE} 2>&1
		elif [[ ${DIRTY_IS_SET} ]]; then
			MSG="${L_31} ${VKODI}"
			echo "${TIMEBLOCK} ${INFO}${MSG}${END}${FFMPEG}"
			loggy ${MSG}
			builtin cd ${KODI}/kodi-build
		fi

		if [[ ${FRESH_INSTALL} ]]; then
			builtin cd ${KODI}
			mkdir kodi-build > /dev/null 2>&1
			MSG="${L_31} ${VKODI}"
			echo "${TIMEBLOCK} ${INFO}${MSG}${END}${FFMPEG}"
			loggy ${MSG}
      builtin cd ${KODI}/kodi-build
      cmake .. -DCMAKE_INSTALL_PREFIX=${PREFIX} >> ${LOGGYLOGFILE} 2>&1
			loggy "###########################################################"
		fi
}

# Function: BUILD_KODI
function build_kodi () {

# We check if we have a message from git_pull. If not, we continue the build
if [[ ! ${GITMSG} ]] || [[ ! ${FAILED} ]]; then

    MSG="${L_30} ${KODINAMEVERSION}"
    loggy ${MSG}
		
    MSG="${L_33} ${VKODI}. ${L_34}"
    echo "${TIMEBLOCK} ${INFO}${MSG}${END}"
    loggy ${MSG}
    cmake --build . -- VERBOSE=0 -s -j${NUMCPU} >> ${LOGGYLOGFILE} 2>&1

    if [[ ! -f ${KODI}/kodi-build/kodi.bin ]]; then
        MSG="${L_35} ${VKODI} ${L_36}"
        echo "${TIMEBLOCK} ${ARROW} ${WARNING}${MSG}${END}"
        loggy ${MSG}
				FAILED="The nightly build of ${VKODI} failed."
    fi

# End of the GITMSG check
fi

}

# Function: INSTALL_KODI
function install_kodi () {

  if [[ ! ${FAILED} ]]; then
        MSG="${L_90} ${PREFIX}"
        echo "${TIMEBLOCK} ${INFO}${MSG}${END}"
        loggy ${MSG}
        builtin cd ${KODI}/kodi-build
        sudo make -s install >> ${LOGGYLOGFILE} 2>&1
	loggy "#########################################################"
  fi

}

# Function: INSTALL_ADDONS
function install_addons () {
if [[ ${ADDON_IS_SET} || ${BINARY_ADDONS_INSTALL} ]]; then
	if [[ ! ${FAILED} ]]; then
		if [[ ${CLEAN_IS_SET} ]]; then
	    MSG="${L_91}"
	    echo "${TIMEBLOCK} ${INFO}${MSG}${END}"
	    loggy ${MSG}
			builtin cd ${KODI}
	    sudo make -s -C \
			tools/depends/target/binary-addons \
			distclean \
			> /dev/null 2>&1
		fi

	    MSG="${L_92}"
	    echo "${TIMEBLOCK} ${INFO}${MSG}${END}"
	    loggy ${MSG}
	    sudo make -s -j${NUMCPU} -C \
	    tools/depends/target/binary-addons \
	    PREFIX=${PREFIX} \
	    >> ${LOGGYLOGFILE} 2>&1
	fi
fi
}


if [[ ${LOCAL_IS_SET} ]]; then
	fetch_kodi
	git_pull
	clean_kodi
	configure_kodi
	build_kodi
	install_kodi
	install_addons

loggy "###################################################################"
loggy "#             End of compilation for ${VKODI}                     #"
loggy "###################################################################"
echo "${TIMEBLOCK} ${YELLOW}All set. You can launch Kodi with the command: ${PREFIX}/bin/kodi${END}"
echo "${TIMEBLOCK} ${YELLOW}You can view the log output in this file: ${LOGGYLOGFILE}${END}"
fi
